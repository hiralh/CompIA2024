/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.edutrack2;

//This is a JFrame for the task editor page.
import static com.mycompany.edutrack2.tasks.selectedStudentName;
import static com.mycompany.edutrack2.tasks.selectedTaskName;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;

public class taskEditor extends javax.swing.JFrame {
    String tasName;
    Date dDate;
    String dHour;
    String dMin;
    int completedValue;
    Connection conn;
    public tasks tas;
    public taskEditor(Connection conn) {
        //connection received
        this.conn= conn;
        initComponents();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup1.add(yes);
        buttonGroup1.add(no);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        exit = new javax.swing.JButton();
        DONE = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tName = new javax.swing.JLabel();
        tName1 = new javax.swing.JLabel();
        dueDate = new com.toedter.calendar.JDateChooser();
        tName3 = new javax.swing.JLabel();
        tName4 = new javax.swing.JLabel();
        taskName = new javax.swing.JTextField();
        dueHour = new javax.swing.JTextField();
        dueMin = new javax.swing.JTextField();
        tName5 = new javax.swing.JLabel();
        yes = new javax.swing.JRadioButton();
        no = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentShown(evt);
            }
        });

        exit.setBackground(new java.awt.Color(0, 0, 0));
        exit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        exit.setForeground(new java.awt.Color(255, 255, 255));
        exit.setText("DELETE");
        exit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        DONE.setBackground(new java.awt.Color(0, 0, 0));
        DONE.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        DONE.setForeground(new java.awt.Color(255, 255, 255));
        DONE.setText("DONE");
        DONE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        DONE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DONEActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Microsoft Himalaya", 1, 24)); // NOI18N
        jLabel1.setText("TASK INFORMATION");

        tName.setFont(new java.awt.Font("Microsoft Himalaya", 0, 18)); // NOI18N
        tName.setText("Task Name:");

        tName1.setFont(new java.awt.Font("Microsoft Himalaya", 0, 18)); // NOI18N
        tName1.setText("Due Date:");

        dueDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tName3.setFont(new java.awt.Font("Microsoft Himalaya", 0, 18)); // NOI18N
        tName3.setText(":");

        tName4.setFont(new java.awt.Font("Microsoft Himalaya", 0, 18)); // NOI18N
        tName4.setText("Time:");

        taskName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        dueHour.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        dueHour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dueHourActionPerformed(evt);
            }
        });

        dueMin.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        dueMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dueMinActionPerformed(evt);
            }
        });

        tName5.setFont(new java.awt.Font("Microsoft Himalaya", 0, 18)); // NOI18N
        tName5.setText("Completed:");

        yes.setText("Yes");
        yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesActionPerformed(evt);
            }
        });

        no.setText("No");
        no.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noActionPerformed(evt);
            }
        });

        jLabel2.setText("(24-hour time)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addComponent(DONE, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tName)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(tName4)
                                                .addComponent(tName1)
                                                .addComponent(tName5)))
                                        .addGap(25, 25, 25)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(no, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(dueDate, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                                                .addComponent(taskName))
                                            .addComponent(yes, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel2)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(107, 107, 107)
                                .addComponent(dueHour, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tName3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dueMin, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exit)
                            .addComponent(DONE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel1)))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tName)
                    .addComponent(taskName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tName1)
                    .addComponent(dueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tName3)
                        .addComponent(dueHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dueMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tName4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tName5)
                    .addComponent(yes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(no)
                .addContainerGap(118, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    //When the delete button is pressed,
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {                                     
        JOptionPane.showMessageDialog(this, "Delete edits?");
        this.dispose(); //closes task editor page
        tas= new tasks(conn);
        tas.setVisible(true); //tasks page is shown
    }                                    

    //When the done button is pressed,
    private void DONEActionPerformed(java.awt.event.ActionEvent evt) {                                     
        //retrieve entered task name, due hour and due min
        tasName = taskName.getText();
        dHour = dueHour.getText();
        dMin = dueMin.getText();
        
        //format date according to database
        SimpleDateFormat dateFormat = new SimpleDateFormat("d MMM y");

        try {
            //retrieve entered date as a Date object
            dDate = dueDate.getDate();
            
            //convert dDate to a String
            String dDateString= dateFormat.format(dDate);
            //convert hour and min to integer type
            int hour = dHour.isEmpty() ? 0 : Integer.parseInt(dHour);
            int min = dMin.isEmpty() ? 0 : Integer.parseInt(dMin);
            
            //store yes or no in terms of numbers (easily stored in and retrieved from database)
            if(yes.isSelected()){
                no.setSelected(false);
                completedValue= 1;
            } else if (no.isSelected()){
                yes.setSelected(false);
                completedValue= 2;
            }
            else {
                completedValue= 0;
            }
            
            //create query to update database with user-entered information
            String query = "UPDATE tasks SET taskName=?, dueDate=?, completed=?, dueHour=?, "
                    + "dueMin=? WHERE sName=? AND taskName= ?";
            
                try (
                    PreparedStatement pstmt = conn.prepareStatement(query)) {
                    pstmt.setString(1, tasName);
                    pstmt.setString(2, dDateString);
                    pstmt.setInt(3, completedValue);
                    pstmt.setInt(4, hour);
                    pstmt.setInt(5, min);
                    pstmt.setString(6, selectedStudentName);
                    pstmt.setString(7, selectedTaskName);
                    pstmt.executeUpdate();
                    
                    JOptionPane.showMessageDialog(this, "Details have been updated");
                }
                
                //retrieve selected student's email from database
                try (PreparedStatement pstmt = conn.prepareStatement("SELECT email FROM studentInfo WHERE sName= ?")) {
                        pstmt.setString(1, selectedStudentName);
                        ResultSet rs = pstmt.executeQuery();
                        if (rs.next()) {
                            String studentEmail = rs.getString("email");
                            if(studentEmail != null && !studentEmail.isEmpty()) {
                                //sending an email reminder about the task to the student to whom the task has been assigned
                                sendReminderEmail(selectedStudentName, studentEmail, tasName, dDateString, hour, min);
                            }
                            else {
                                JOptionPane.showMessageDialog(this,"Email not given. Enter email in Student Information page.");
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Error fetching student email: " +ex.getMessage());
                    }

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please enter valid values for hour and minute.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error updating student information: " + ex.getMessage());
        }
        this.dispose(); //task editor page closed
        tas= new tasks(conn);
        tas.setVisible(true); //tasks page opened
    }                                    

    private void jPanel1ComponentShown(java.awt.event.ComponentEvent evt) {                                       
    }                                      

    private void dueHourActionPerformed(java.awt.event.ActionEvent evt) {                                        
    }                                       

    private void dueMinActionPerformed(java.awt.event.ActionEvent evt) {                                       
    }                                      

    private void noActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
    }                                  

    private void yesActionPerformed(java.awt.event.ActionEvent evt) {                                    
        // TODO add your handling code here:
    }                                   

    public void setTaskDetails(String taskName, String dueDate, int completedValue, String dueHour, String dueMin)
    {
        //setting the JTextFields in the task editor page with the current details from the database
        SimpleDateFormat dateFormat = new SimpleDateFormat("d MMM y");
        if (taskName != null) {
            this.taskName.setText(taskName);
        } else {
            this.taskName.setText("");
        }
        
        if (dueDate != null) {
            try {
                Date parsedDueDate = dateFormat.parse(dueDate);
                this.dueDate.setDate(parsedDueDate);
        } catch (ParseException ex) {
        }
        } else {
            this.dueDate.setDate(null);
        }
        
        if (completedValue == 1) {
            yes.setSelected(true);
        } else if (completedValue == 2) {
            no.setSelected(true);
        } else {
            buttonGroup1.clearSelection();
        }
        
        if (dueHour != null) {
            this.dueHour.setText(dueHour);
        } else {
            this.dueHour.setText("");
        }
        
        if (dueMin != null) {
            this.dueMin.setText(dueMin);
        } else {
            this.dueMin.setText("");
        }
    }
    
    public static void sendReminderEmail(String student, String sEmail, String taskName, String date, int hour, int min) {
        //set sender email and password
        String senderEmail = "hiral.h0305@gmail.com";
        //using app password for more security and to avoid 2-factor authentication
        String senderPassword = "cqhv inpj gvmf glxb";
        
        //assigning mail server properties to a Properties object
        Properties props = new Properties();
        
        //command to request authentication to connect to SMTP (Simple Mail Transfer Protocol) server
        props.put("mail.smtp.auth", "true");
        
        //enabling STARTTLS command to use a TLS-protected connection to increase security and encrypt data
        props.put("mail.smtp.starttls.enable", "true");
        
        //specifying that SMTP server for sending emails through Gmail
        props.put("mail.smtp.host", "smtp.gmail.com");
        
        //setting port for sending mails with STARTTLS
        props.put("mail.smtp.port", "587");
        
        //creating a mail Session object to build and send mails
        Session session = Session.getInstance(props, new javax.mail.Authenticator() {
        @Override
        protected PasswordAuthentication getPasswordAuthentication() {
            //for Session object, to authenticate sender with SMTP server
            return new PasswordAuthentication(senderEmail, senderPassword);
        }
    });



        try {
            //create a mime message object with Session session
            Message message = new MimeMessage(session);
            
            //set sender's email address to the From field
            message.setFrom(new InternetAddress(senderEmail));
            
            //set student's email address to the To field
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(sEmail));
            
            //set subject of email
            message.setSubject("Reminder: Task Assigned - " + taskName);
            
            //set body of email
            message.setText("This is a reminder that you have been assigned the task " + taskName.toUpperCase() +" which is due on " +date +" at " +hour +":" +min +".");

            //sends email
            Transport.send(message);

        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(taskEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(taskEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(taskEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(taskEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>*/

    // Variables declaration - do not modify                     
    private javax.swing.JButton DONE;
    private javax.swing.ButtonGroup buttonGroup1;
    private com.toedter.calendar.JDateChooser dueDate;
    private javax.swing.JTextField dueHour;
    private javax.swing.JTextField dueMin;
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton no;
    private javax.swing.JLabel tName;
    private javax.swing.JLabel tName1;
    private javax.swing.JLabel tName3;
    private javax.swing.JLabel tName4;
    private javax.swing.JLabel tName5;
    private javax.swing.JTextField taskName;
    private javax.swing.JRadioButton yes;
    // End of variables declaration                   
}