/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.edutrack2;

//This is a JFrame for the files page.
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class files extends javax.swing.JFrame {

    Connection conn;
    public static dashboard dash;
    public static fileEditor filEditor;
    public static String selectedStudentName;
    public static String selectedFileName;
    static DefaultListModel stuMod= new DefaultListModel();
    static DefaultListModel filMod= new DefaultListModel();
    public files(Connection conn) {
        //connection received
        this.conn= conn;
        initComponents();
        //student list is assigned to a list model called 'stuMod'
        studentList.setModel(stuMod);
        stuMod.clear();
        //file list is assigned to a list model called 'filMod'
        fileList.setModel(filMod);
        filMod.clear();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentList = new javax.swing.JList<>();
        viewList = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        add = new javax.swing.JButton();
        displayPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        home = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Files", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Microsoft Himalaya", 1, 24)); // NOI18N
        jLabel2.setText("CLASSES");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jLabel2)
                .addContainerGap(89, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        studentList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        studentList.setName(""); // NOI18N
        studentList.setSelectionForeground(new java.awt.Color(51, 255, 51));
        studentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                studentListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(studentList);

        viewList.setBackground(new java.awt.Color(0, 0, 0));
        viewList.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        viewList.setForeground(new java.awt.Color(255, 255, 255));
        viewList.setText("VIEW");
        viewList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewListActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(0, 0, 0));
        delete.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("-");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        fileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fileList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fileListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(fileList);

        add.setBackground(new java.awt.Color(0, 0, 0));
        add.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        add.setForeground(new java.awt.Color(255, 255, 255));
        add.setText("+");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        displayPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Microsoft Himalaya", 1, 24)); // NOI18N
        jLabel1.setText("FILES");

        home.setBackground(new java.awt.Color(0, 0, 0));
        home.setForeground(new java.awt.Color(255, 255, 255));
        home.setText("HOME");
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(91, 91, 91)
                .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(home)
                    .addComponent(jLabel1))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(viewList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(viewList, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                        .addComponent(add)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    //When a student's name is clicked from the student list,
    private void studentListValueChanged(javax.swing.event.ListSelectionEvent evt) {                                         
        if (!evt.getValueIsAdjusting()) {
            //retrieve selected student's name
            selectedStudentName = studentList.getSelectedValue();
            if (selectedStudentName != null && !selectedStudentName.isEmpty()) {
                try {
                    //extract name of files under the selected student's name
                    String query = "SELECT fileName FROM files WHERE sName=?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, selectedStudentName);
                        try (ResultSet rs = pstmt.executeQuery()) {
                            //clear file list model in case any names were displaying before
                            filMod.clear();
                            //on the files list, display names of files under the selected student's name
                            while (rs.next()) {
                                String fileName = rs.getString("fileName");
                                //add file name to file list model
                                filMod.addElement(fileName);
                            }
                        }
                    }

                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Failed to load files for the selected student.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }                                        

    //When view button is pressed,
    private void viewListActionPerformed(java.awt.event.ActionEvent evt) {                                         
        //clear student list model in case any student names were being displayed
        stuMod.clear();
        try {
            try (Statement stmt = conn.createStatement()) {
                //select names of all students that are currently registered by the client
                ResultSet rs = stmt.executeQuery("SELECT sName FROM studentInfo");

                //display names of all currently registered students
                while (rs.next()) {
                    String studentName = rs.getString("sName");
                    //add names of all students in the student list model
                    stuMod.addElement(studentName);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Failed to load student names.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                        

    //When - button is pressed,
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {                                       
        //enter name of file to be deleted
        selectedFileName = JOptionPane.showInputDialog("Enter the name of the file:");
        if (selectedFileName != null && !selectedFileName.isEmpty()) {
            try {
                //select all columns of data for the user-entered file name from the selected student's list od files
                String query = "SELECT * FROM files WHERE sName = ? AND fileName= ?";
                PreparedStatement pstmt = conn.prepareStatement(query);
                pstmt.setString(1, selectedStudentName);
                pstmt.setString(2, selectedFileName);
                ResultSet rs = pstmt.executeQuery();
                if(rs.next()){
                    //from the database, delete record of the user-entered file name for the selected student
                    query = "DELETE FROM files WHERE fileName= ? AND sName= ?";
                    pstmt = conn.prepareStatement(query);
                    pstmt.setString(1, selectedFileName);
                    pstmt.setString(2, selectedStudentName);
                    pstmt.executeUpdate();

                    JOptionPane.showMessageDialog(this, "File '" +selectedFileName + "' deleted successfully.");
                }
                else {
                JOptionPane.showMessageDialog(this, "No file found with the name '" +selectedFileName + "'.");
            }
            } catch (SQLException ex) {
                Logger.getLogger(studentInfo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }                                      

    //When the + button is pressed,
    private void addActionPerformed(java.awt.event.ActionEvent evt) {                                    
        //enter name of file to be added
        String newFileName = JOptionPane.showInputDialog("Enter the name of new file:");
        if (newFileName != null && !newFileName.isEmpty()) {
            try {
                /*create a SQL query to create a record in the database for the user-entered file name
                under the name of the selected student*/
                String query = "INSERT INTO files (sName, fileName) VALUES (?, ?)";
                PreparedStatement pstmt = conn.prepareStatement(query);
                        pstmt.setString(1, selectedStudentName);
                        pstmt.setString(2, newFileName);
                        pstmt.executeUpdate();

                        //add file name to file list model
                        filMod.addElement(newFileName);
            } catch (SQLException ex) {
                Logger.getLogger(studentInfo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }                                   

    //When home button is pressed,
    private void homeActionPerformed(java.awt.event.ActionEvent evt) {                                     
        this.setVisible(false); //files page is closed
        dash= new dashboard(conn);
        dash.setVisible(true); //dashboard page is shown
    }                                    

    //When a file name is clicked from the file list of a selected student
    private void fileListValueChanged(javax.swing.event.ListSelectionEvent evt) {                                      
        if (!evt.getValueIsAdjusting()) {
            //retrieve name of selected file
            selectedFileName = fileList.getSelectedValue();
            //open file editor
            openFileEditor(selectedFileName);
        }
    }                                     

    private void openFileEditor(String fileName) {
    if (fileName != null && !fileName.isEmpty()) {
        try {
            //create a SQL query to retrieve all details of the selected file from the selected student's list
            String query = "SELECT fileName, file FROM files WHERE sName=? AND fileName=?";
            try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                pstmt.setString(1, selectedStudentName);
                pstmt.setString(2, fileName);
                
                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        filEditor = new fileEditor(conn);
                        this.setVisible(false); //files page closed
                        filEditor.setVisible(true); //files page shown
                        /*method from the fileEditor class called to set JTextFields of the file editor page with
                        current information from the database*/
                        filEditor.setFileDetails(rs.getString("fileName"), 
                                rs.getString("file") );
                    } else {
                        JOptionPane.showMessageDialog(this, "No file found with the name '" 
                                + fileName + "'.");
                    }
                }
            }
        }catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Failed to load file details.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(files.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(files.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(files.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(files.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>*/

    // Variables declaration - do not modify                     
    private javax.swing.JButton add;
    private javax.swing.JButton delete;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JList<String> fileList;
    private javax.swing.JButton home;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> studentList;
    private javax.swing.JButton viewList;
    // End of variables declaration                   
}