/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.edutrack2;

//This is a JFrame for the meeting records page.
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class meetingRecords extends javax.swing.JFrame {

    Connection conn;
    public static String selectedStudentName;
    public static String selectedMeetingName;
    public static dashboard dash;
    public static calendar cal;
    static DefaultListModel stuMod= new DefaultListModel();
    static DefaultListModel meetMod= new DefaultListModel();
    public meetingRecords(Connection conn) {
        //connection received
        this.conn= conn;
        initComponents();
        //studentList assigned to a list model called 'stuMod'
        studentList.setModel(stuMod);
        stuMod.clear();
        //meetingList assigned to a list model called 'meetMod'
        meetingList.setModel(meetMod);
        meetMod.clear();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        viewList = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        meetingList = new javax.swing.JList<>();
        delete = new javax.swing.JButton();
        add = new javax.swing.JButton();
        displayPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        home = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Meeting Records", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        viewList.setBackground(new java.awt.Color(0, 0, 0));
        viewList.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        viewList.setForeground(new java.awt.Color(255, 255, 255));
        viewList.setText("VIEW");
        viewList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewListActionPerformed(evt);
            }
        });

        studentList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        studentList.setName(""); // NOI18N
        studentList.setSelectionForeground(new java.awt.Color(51, 255, 51));
        studentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                studentListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(studentList);

        meetingList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        meetingList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                meetingListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(meetingList);

        delete.setBackground(new java.awt.Color(0, 0, 0));
        delete.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("-");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        add.setBackground(new java.awt.Color(0, 0, 0));
        add.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        add.setForeground(new java.awt.Color(255, 255, 255));
        add.setText("+");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        displayPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Microsoft Himalaya", 1, 24)); // NOI18N
        jLabel1.setText("MEETINGS");

        home.setBackground(new java.awt.Color(0, 0, 0));
        home.setForeground(new java.awt.Color(255, 255, 255));
        home.setText("HOME");
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(home)
                    .addComponent(jLabel1))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Microsoft Himalaya", 1, 24)); // NOI18N
        jLabel4.setText("CLASSES");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jLabel4)
                .addContainerGap(89, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(viewList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(viewList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(add)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    //When view button is pressed,
    private void viewListActionPerformed(java.awt.event.ActionEvent evt) {                                         
        //clear student list model in case there were any names being displayed
        stuMod.clear();
        try {
            //extracting all student names from database
            try (Statement stmt = conn.createStatement()) {
                ResultSet rs = stmt.executeQuery("SELECT sName FROM studentInfo");

                //displaying all student names by adding it to the student list model 'stuMod'
                while (rs.next()) {
                    String studentName = rs.getString("sName");
                    stuMod.addElement(studentName);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Failed to load student names.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                        

    //When a student name is pressed on the student list,
    private void studentListValueChanged(javax.swing.event.ListSelectionEvent evt) {                                         
        if (!evt.getValueIsAdjusting()) {
            //retrieve name of selected student
            selectedStudentName = studentList.getSelectedValue();
            if (selectedStudentName != null && !selectedStudentName.isEmpty()) {
                try {
                    //create a SQL query to retrieve names of all meeting records created for selected student
                    String query = "SELECT mName FROM meetingRecords WHERE sName=?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, selectedStudentName);
                        try (ResultSet rs = pstmt.executeQuery()) {
                            //clear meeting list model in case any names were being displayed
                            meetMod.clear();
                            /*display all meeting record names for selected student by adding retrieved meeting names
                            to meeting list model 'meetMod'*/
                            while (rs.next()) {
                                String meetingName = rs.getString("mName");
                                meetMod.addElement(meetingName);
                            }
                        }
                    }

                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, 
                            "Failed to load meeting records for the selected student.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }                                        

    //When - button is pressed,
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {                                       
        //enter name of meeting to be deleted
        selectedMeetingName = JOptionPane.showInputDialog("Enter the name of the meeting:");
        if (selectedMeetingName != null && !selectedMeetingName.isEmpty()) {
            try {
                //select all columns of data for the user-entered meeting name for the selected student
                String query = "SELECT * FROM meetingRecords WHERE sName = ? AND mName= ?";
                PreparedStatement pstmt = conn.prepareStatement(query);
                pstmt.setString(1, selectedStudentName);
                pstmt.setString(2, selectedMeetingName);
                ResultSet rs = pstmt.executeQuery();
                
                //delete the meeting record with the user-entered name for the selected student from the database
                if(rs.next()){
                query = "DELETE FROM meetingRecords WHERE mName= ? AND sName= ?";
                pstmt = conn.prepareStatement(query);
                        pstmt.setString(1, selectedMeetingName);
                        pstmt.setString(2, selectedStudentName);
                        pstmt.executeUpdate();
                        
                        JOptionPane.showMessageDialog(this, "Meeting record '" +selectedMeetingName + "' deleted successfully.");
                        //remove user-entered meeting name from the meeting list
                        meetMod.removeElement(selectedMeetingName);
                }
                else {
                JOptionPane.showMessageDialog(this, "No meeting record found with the name '" +selectedMeetingName + "'.");
            }
            } catch (SQLException ex) {
                Logger.getLogger(studentInfo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }                                      

    //When the + button is pressed,
    private void addActionPerformed(java.awt.event.ActionEvent evt) {                                    
        //enter name of meeting to be added
        String newMeetingName = JOptionPane.showInputDialog("Enter the name of new meeting:");
        if (newMeetingName != null && !newMeetingName.isEmpty()) {
            try {
                //enter meeting name into database
                String query = "INSERT INTO meetingRecords (sName, mName) VALUES (?, ?)";
                PreparedStatement pstmt = conn.prepareStatement(query);
                        pstmt.setString(1, selectedStudentName);
                        pstmt.setString(2, newMeetingName);
                        pstmt.executeUpdate();
                        //add meeting name to meeting list model for selected student
                        meetMod.addElement(newMeetingName);
            } catch (SQLException ex) {
                Logger.getLogger(studentInfo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }                                   

    //When home button pressed,
    private void homeActionPerformed(java.awt.event.ActionEvent evt) {                                     
        this.setVisible(false); //meeting records page closed
        dash= new dashboard(conn);
        dash.setVisible(true); //dashboard page opened
    }                                    

    //When a meeting name is clicked on from the meeting list,
    private void meetingListValueChanged(javax.swing.event.ListSelectionEvent evt) {                                         
        if (!evt.getValueIsAdjusting()) {
            //retrieve name of meeting that was selected from list
            selectedMeetingName = meetingList.getSelectedValue();
            //opening the meeting editor page which is called 'calendar'
            openCalendar(selectedMeetingName);
        }
    }                                        

    private void openCalendar(String meetingName) {
    if (meetingName != null) {
        try {
            //retrieves all the current meeting details for the selected meeting of the selected student
            String query = "SELECT mName, date, startHour, startMin, endHour, endMin FROM meetingRecords WHERE sName=? AND mName=?";
            try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                pstmt.setString(1, selectedStudentName);
                pstmt.setString(2, meetingName);
                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        cal = new calendar(conn);
                        this.setVisible(false); //meeting records page closed
                        cal.setVisible(true); //calendar page shown
                        
                        cal.setMeetingDetails(rs.getString("mName"), rs.getString("date"), rs.getString("startHour"), rs.getString("startMin"), rs.getString("endHour"), rs.getString("endMin"));
                    } else {
                        JOptionPane.showMessageDialog(this, "No meeting record found with the name '" + meetingName + "'.");
                    }
                }            }
        }catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Failed to load meeting record details.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(meetingRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(meetingRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(meetingRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(meetingRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>*/
    

    // Variables declaration - do not modify                     
    private javax.swing.JButton add;
    private javax.swing.JButton delete;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JButton home;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> meetingList;
    private javax.swing.JList<String> studentList;
    private javax.swing.JButton viewList;
    // End of variables declaration                   
}