/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.edutrack2;

//This is a JFrame for the calendar/meeting editor page.
import static com.mycompany.edutrack2.meetingRecords.selectedStudentName;
import static com.mycompany.edutrack2.meetingRecords.selectedMeetingName;
import java.sql.*;
import java.util.Date;
import java.util.*;
import java.text.*;
import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;

public class calendar extends javax.swing.JFrame {

    String mName;
    java.util.Date date;
    String sHour;
    String sMin;
    String eHour;
    String eMin;
    public static meetingRecords mr;
    Connection conn;
    public calendar(Connection conn) {
        //connection received
        this.conn=conn;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panel1 = new java.awt.Panel();
        jPanel2 = new javax.swing.JPanel();
        mDate = new javax.swing.JLabel();
        meetingName = new javax.swing.JTextField();
        mName1 = new javax.swing.JLabel();
        meetingDate = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        startHour = new javax.swing.JTextField();
        startMin = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        endHour = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        endMin = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        DONE = new javax.swing.JButton();
        exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("CALENDAR");

        panel1.setBackground(new java.awt.Color(102, 102, 102));
        panel1.setForeground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        mDate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        mDate.setText("Date:");

        meetingName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        mName1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        mName1.setText("Meeting Name:");

        meetingDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Start Time:");

        startHour.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        startMin.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText(":");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("End Time:");

        endHour.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText(":");

        endMin.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setText("(24-hour time)");

        jLabel7.setText("(24-hour time)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(14, 14, 14)
                                    .addComponent(mName1))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(mDate))))
                        .addGap(61, 61, 61)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(meetingName)
                            .addComponent(meetingDate, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(endHour, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(startHour, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(startMin, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(endMin, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meetingName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mName1))
                .addGap(84, 84, 84)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(meetingDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mDate))
                .addGap(62, 62, 62)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(startHour, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startMin, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(endHour, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(endMin, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addContainerGap(107, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        DONE.setText("DONE");
        DONE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        DONE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DONEActionPerformed(evt);
            }
        });

        exit.setText("DELETE");
        exit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(175, 175, 175)
                        .addComponent(jLabel1)
                        .addGap(186, 186, 186)
                        .addComponent(DONE, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DONE)
                            .addComponent(exit))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    //When the done button is pressed,
    private void DONEActionPerformed(java.awt.event.ActionEvent evt) {                                     
        //extract user-entered text from JTextFields
        mName = meetingName.getText();
        sHour = startHour.getText();
        sMin = startMin.getText();
        eHour = endHour.getText();
        eMin = endMin.getText();
        
        //format date according to database
        SimpleDateFormat dateFormat = new SimpleDateFormat("d MMM y");

        try {
            //extract user-entered date from JCalendar as a Date object
            date = meetingDate.getDate();
            String dDateString= dateFormat.format(date);
            int STARThour = sHour.isEmpty() ? 0 : Integer.parseInt(sHour);
            int STARTmin = sMin.isEmpty() ? 0 : Integer.parseInt(sMin);
            int ENDhour = eHour.isEmpty() ? 0 : Integer.parseInt(eHour);
            int ENDmin = eMin.isEmpty() ? 0 : Integer.parseInt(eMin);
            
            //create a query to update database with currently user-entered information
            String query = "UPDATE meetingRecords SET mName=?, date=?, startHour=?, startMin= ?, "
                    + "endHour= ?, endMin= ? WHERE sName=? AND mName= ?";
            
                try (
                    PreparedStatement pstmt = conn.prepareStatement(query)) {

                    pstmt.setString(1, mName);
                    pstmt.setString(2, dDateString);
                    pstmt.setInt(3, STARThour);
                    pstmt.setInt(4, STARTmin);
                    pstmt.setInt(5, ENDhour);
                    pstmt.setInt(6, ENDmin);
                    pstmt.setString(7, selectedStudentName);
                    pstmt.setString(8, selectedMeetingName);
                    pstmt.executeUpdate();
                    
                    JOptionPane.showMessageDialog(this, "Details have been updated");
                }
                //create a SQL query to retrieve selected student's email
                try (PreparedStatement pstmt = conn.prepareStatement("SELECT email FROM studentInfo WHERE sName= ?")) {
                        pstmt.setString(1, selectedStudentName);
                        ResultSet rs = pstmt.executeQuery();
                        if (rs.next()) {
                            String studentEmail = rs.getString("email");
                            if(studentEmail != null && !studentEmail.isEmpty()) {
                                //sending email to selected student to remind them of the scheduled meeting
                                sendReminderEmail(selectedStudentName, studentEmail, mName, 
                                        dDateString, STARThour, STARTmin, ENDhour, ENDmin);
                            }
                            else {
                                JOptionPane.showMessageDialog(this,"Email not given."
                                        + " Enter email in Student Information page.");
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Error fetching student email: " 
                                + ex.getMessage());
                    }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error updating student information: " + ex.getMessage());
        }

        this.dispose(); //calendar/meeting editor page closed
        mr= new meetingRecords(conn);
        mr.setVisible(true); //meeting records page shown
    }                                    

    //When delete button pressed,
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {                                     
        JOptionPane.showMessageDialog(this, "Delete edits?");
        this.setVisible(false); //calendar/meeting editor page closed
        mr= new meetingRecords(conn);
        mr.setVisible(true); //meeting record page shown
    }                                    

    public void setMeetingDetails(String mName, String date, String sHour, String sMin, String eHour, String eMin)
    {
        //setting JTextFields with the current information from the database
        SimpleDateFormat dateFormat = new SimpleDateFormat("d MMM y");
        if (mName != null) {
            this.meetingName.setText(mName);
        } else {
            this.meetingName.setText("");
        }
        if (date != null) {
            try {
                Date parsedDate = dateFormat.parse(date);
                this.meetingDate.setDate(parsedDate);
        } catch (ParseException ex) {
        }
        } else {
            this.meetingDate.setDate(null);
        }
        
        if (sHour != null) {
            this.startHour.setText(sHour);
        } else {
            this.startHour.setText("");
        }
        
        if (sMin != null) {
            this.startMin.setText(sMin);
        } else {
            this.startMin.setText("");
        }
        if (eHour != null) {
            this.endHour.setText(eHour);
        } else {
            this.endHour.setText("");
        }
        if (eMin != null) {
            this.endMin.setText(eMin);
        } else {
            this.endMin.setText("");
        }
    }
    
    public static void sendReminderEmail(String student, String sEmail, String meetingName, String date, 
            int startHour, int startMin, int endHour, int endMin) {
        //set sender email and password
        String senderEmail = "hiral.h0305@gmail.com";
        //using app password for more security and to avoid 2-factor authentication
        String senderPassword = "cqhv inpj gvmf glxb";
        
        //assigning mail server properties to a Properties object
        Properties props = new Properties();
        
        //command to request authentication to connect to SMTP (Simple Mail Transfer Protocol) server
        props.put("mail.smtp.auth", "true");
        
        //enabling STARTTLS command to use a TLS-protected connection to increase security and encrypt data
        props.put("mail.smtp.starttls.enable", "true");
        
        //specifying that SMTP server for sending emails through Gmail
        props.put("mail.smtp.host", "smtp.gmail.com");
        
        //setting port for sending mails with STARTTLS
        props.put("mail.smtp.port", "587");

        //creating a mail Session object to build and send mails
        Session session = Session.getInstance(props, new javax.mail.Authenticator() {
        @Override
        protected PasswordAuthentication getPasswordAuthentication() {
            //for Session object, to authenticate sender with SMTP server
            return new PasswordAuthentication(senderEmail, senderPassword);
        }
    });



        try {
            //create a mime message object with Session session
            Message message = new MimeMessage(session);
            
            //set sender's email address to the From field
            message.setFrom(new InternetAddress(senderEmail));
            
            //set student's email address to the To field
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(sEmail));
            
            //set subject of email
            message.setSubject("Reminder: Upcoming Meeting - " + meetingName);
            
            //set body of email
            message.setText("This is a reminder that you have a meeting " + meetingName.toUpperCase() 
                    + " scheduled for " +date +" from " +startHour +":" +startMin +" to " +endHour +":" +endMin +".");

            //sends email
            Transport.send(message);

        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }
    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>*/

    
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton DONE;
    private javax.swing.JTextField endHour;
    private javax.swing.JTextField endMin;
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel mDate;
    private javax.swing.JLabel mName1;
    private com.toedter.calendar.JDateChooser meetingDate;
    private javax.swing.JTextField meetingName;
    private java.awt.Panel panel1;
    private javax.swing.JTextField startHour;
    private javax.swing.JTextField startMin;
    // End of variables declaration                   
}