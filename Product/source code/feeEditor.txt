/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.edutrack2;

//This is a JFrame for the fee information editor page.
import static com.mycompany.edutrack2.fees.selectedFeeName;
import static com.mycompany.edutrack2.fees.selectedStudentName;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;

public class feeEditor extends javax.swing.JFrame {

    Connection conn;
    public static fees fee;
    int paid;
    String sDateString= "1 Jan 2024";
    String eDateString= "1 Jan 2024";
    static double tAmount= 0;
    static double fPaid= 0;
    public feeEditor(Connection conn) {
        //connection received
        this.conn= conn;
        initComponents();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup1.add(yes);
        buttonGroup1.add(no);
        buttonGroup1.add(notComplete);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        exit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        DONE = new javax.swing.JButton();
        tName2 = new javax.swing.JLabel();
        feeName = new javax.swing.JTextField();
        tName3 = new javax.swing.JLabel();
        totalFeeAmount = new javax.swing.JTextField();
        tName4 = new javax.swing.JLabel();
        feePaid = new javax.swing.JTextField();
        startDate = new com.toedter.calendar.JDateChooser();
        tName5 = new javax.swing.JLabel();
        tName6 = new javax.swing.JLabel();
        endDate = new com.toedter.calendar.JDateChooser();
        tName7 = new javax.swing.JLabel();
        yes = new javax.swing.JRadioButton();
        no = new javax.swing.JRadioButton();
        notComplete = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        exit.setBackground(new java.awt.Color(0, 0, 0));
        exit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        exit.setForeground(new java.awt.Color(255, 255, 255));
        exit.setText("DELETE");
        exit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Microsoft Himalaya", 1, 24)); // NOI18N
        jLabel1.setText("FEE INFORMATION");

        DONE.setBackground(new java.awt.Color(0, 0, 0));
        DONE.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        DONE.setForeground(new java.awt.Color(255, 255, 255));
        DONE.setText("DONE");
        DONE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        DONE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DONEActionPerformed(evt);
            }
        });

        tName2.setFont(new java.awt.Font("Microsoft Himalaya", 0, 18)); // NOI18N
        tName2.setText("Fee Name:");

        feeName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tName3.setFont(new java.awt.Font("Microsoft Himalaya", 0, 18)); // NOI18N
        tName3.setText("Total Fee Amount:");

        totalFeeAmount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tName4.setFont(new java.awt.Font("Microsoft Himalaya", 0, 18)); // NOI18N
        tName4.setText("Fee Paid:");

        feePaid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        startDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tName5.setFont(new java.awt.Font("Microsoft Himalaya", 0, 18)); // NOI18N
        tName5.setText("Start Date:");

        tName6.setFont(new java.awt.Font("Microsoft Himalaya", 0, 18)); // NOI18N
        tName6.setText("End Date:");

        endDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tName7.setFont(new java.awt.Font("Microsoft Himalaya", 0, 18)); // NOI18N
        tName7.setText("Paid:");

        yes.setText("Yes");
        yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesActionPerformed(evt);
            }
        });

        no.setText("No");

        notComplete.setText("Not Complete");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(104, 104, 104)
                        .addComponent(DONE, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tName4)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(40, 40, 40)
                                    .addComponent(tName2))
                                .addComponent(tName3))
                            .addComponent(tName5)
                            .addComponent(tName6)
                            .addComponent(tName7))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(feeName, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                                .addComponent(totalFeeAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                                .addComponent(feePaid, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                                .addComponent(startDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(endDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(yes, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(no, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(notComplete))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exit)
                    .addComponent(DONE)
                    .addComponent(jLabel1))
                .addGap(73, 73, 73)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tName2)
                    .addComponent(feeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tName3)
                    .addComponent(totalFeeAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(feePaid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tName4))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tName5)
                    .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(tName6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tName7, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(no)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notComplete)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    //When the delete button is pressed,
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {                                     
        JOptionPane.showMessageDialog(this, "Delete edits?");
        this.setVisible(false); //fee editor page closed
        fee= new fees(conn);
        fee.setVisible(true); //fees page shown
    }                                    

    //When the done button is pressed,
    private void DONEActionPerformed(java.awt.event.ActionEvent evt) {                                     
        //retrieve details entered by user in the JTextFields
        String fName = feeName.getText();
        tAmount= Double.parseDouble(totalFeeAmount.getText());
        fPaid= Double.parseDouble(feePaid.getText());
        
        //format date according database
        SimpleDateFormat dateFormat = new SimpleDateFormat("d MMM y");
        
        try{
            //retrieve user-entered start and end date details from the JDateChooser of Date type
            Date sDate = startDate.getDate();
            Date eDate = endDate.getDate();
        
            //format dates to String
            sDateString = dateFormat.format(sDate);
            eDateString = dateFormat.format(eDate);
            
            if(yes.isSelected()){
                no.setSelected(false);
                notComplete.setSelected(false);
                paid= 1;
            } else if (no.isSelected()){
                yes.setSelected(false);
                notComplete.setSelected(false);
                paid= 2;
            } else if (notComplete.isSelected()) {
                yes.setSelected(false);
                no.setSelected(false);
                paid = 3;
            } else {
                buttonGroup1.clearSelection();
                paid= 0;
            }
            
            //create a SQL query to update information in the database with user-entered information
            String query= "UPDATE fees SET feeName=?, totalAmount=?, feePaid=?, startDate=?, endDate=?, paid=? WHERE sName=? AND feeName=?";
            try (
                PreparedStatement pstmt = conn.prepareStatement(query)) {
                pstmt.setString(1, fName);
                pstmt.setDouble(2, tAmount);
                pstmt.setDouble(3, fPaid);
                pstmt.setString(4, sDateString);
                pstmt.setString(5, eDateString);
                pstmt.setInt(6, paid);
                pstmt.setString(7, selectedStudentName);
                pstmt.setString(8, selectedFeeName);
                pstmt.executeUpdate();
                
                JOptionPane.showMessageDialog(this, "Details have been updated");
            }
                //retrieve selected student's email
                try (PreparedStatement pstmt = conn.prepareStatement("SELECT email FROM studentInfo WHERE sName= ?")) {
                        pstmt.setString(1, selectedStudentName);
                        ResultSet rs = pstmt.executeQuery();
                        if (rs.next()) {
                            String studentEmail = rs.getString("email");
                            if(studentEmail != null && !studentEmail.isEmpty()) {
                            //send email to student regarding pending or completed fee
                            sendReminderEmail(selectedStudentName, studentEmail, fName, 
                                    sDateString, eDateString);
                            }
                            else {
                                JOptionPane.showMessageDialog(this,"Email not given. Enter email in Student Information page.");
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Error fetching student email: " 
                                +ex.getMessage());
                    }
            } catch (SQLException ex) {
                Logger.getLogger(fileEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.setVisible(false); //fee editor page closed
            fee= new fees(conn);
            fee.setVisible(true); //fees page shown
    }                                    

    private void yesActionPerformed(java.awt.event.ActionEvent evt) {                                    
        // TODO add your handling code here:
    }                                   

    public void setFeeDetails(String feeName, Double totalFeeAmount, Double feePaid, String startDate, String endDate, int paid)
    {
        //sets JTextFields on the fee editor page with the current fee details from the database
        SimpleDateFormat dateFormat = new SimpleDateFormat("d MMM y");
        if (feeName != null) {
            this.feeName.setText(feeName);
        } else {
            this.feeName.setText("");
        }
        if (totalFeeAmount != null) {
            this.totalFeeAmount.setText(String.valueOf(totalFeeAmount));
        } else {
            this.totalFeeAmount.setText("0");
        }
        if (feePaid != null) {
            this.feePaid.setText(String.valueOf(feePaid));
        } else {
            this.feePaid.setText("0");
        }
        if (startDate != null) {
            try {
            Date parsedStartDate = dateFormat.parse(startDate);
            this.startDate.setDate(parsedStartDate);
        } catch (ParseException ex) {
        }
        } else {
            this.startDate.setDate(null);
        }
        if (endDate != null) {
            try {
            Date parsedEndDate = dateFormat.parse(endDate);
            this.endDate.setDate(parsedEndDate);
        } catch (ParseException ex) {
        }
        } else {
            this.endDate.setDate(null);
        }
        if (paid == 1) {
            yes.setSelected(true);
        } else if(paid == 2) {
            no.setSelected(true);
        } else if(paid == 3) {
            notComplete.setSelected(true);
        } else {
            buttonGroup1.clearSelection();
        }
    }
    
    public static void sendReminderEmail(String student, String sEmail, String feeName, String sDate, String eDate) {
        //set sender email and password
        String senderEmail = "hiral.h0305@gmail.com";
        //using app password for more security and to avoid 2-factor authentication
        String senderPassword = "cqhv inpj gvmf glxb";
        
        //assigning mail server properties to a Properties object
        Properties props = new Properties();
        
        //command to request authentication to connect to SMTP (Simple Mail Transfer Protocol) server
        props.put("mail.smtp.auth", "true");
        
        //enabling STARTTLS command to use a TLS-protected connection to increase security and encrypt data
        props.put("mail.smtp.starttls.enable", "true");
        
        //specifying that SMTP server for sending emails through Gmail
        props.put("mail.smtp.host", "smtp.gmail.com");
        
        //setting port for sending mails with STARTTLS
        props.put("mail.smtp.port", "587");

        //creating a mail Session object to build and send mails
        Session session = Session.getInstance(props, new javax.mail.Authenticator() {
        @Override
        protected PasswordAuthentication getPasswordAuthentication() {
            //for Session object, to authenticate sender with SMTP server
            return new PasswordAuthentication(senderEmail, senderPassword);
        }
    });



        try {
            //create a mime message object with Session session
            Message message = new MimeMessage(session);
            
            //set sender's email address to the From field
            message.setFrom(new InternetAddress(senderEmail));
            
            //set student's email address to the To field
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(sEmail));
            
            if(fPaid<tAmount) {
                //set subject of email
                message.setSubject("Reminder: Pending Fee Details - " + feeName);
                //set body of email
                message.setText("This is a reminder that you have a fee '" + feeName.toUpperCase() + "' of amount " +(tAmount-fPaid) +" pending for classes from " +sDate +" to " +eDate +".");
            }
            else {
                //set subject of email
                message.setSubject("Reminder: Fee Receipt - " + feeName);
                //set body of email
                message.setText("You have paid the fee '" + feeName.toUpperCase() + "' of amount " +tAmount +" for classes from " +sDate +" from " +eDate +".");
            }

            //sends email
            Transport.send(message);

        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(feeEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(feeEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(feeEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(feeEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>*/

    // Variables declaration - do not modify                     
    private javax.swing.JButton DONE;
    private javax.swing.ButtonGroup buttonGroup1;
    private com.toedter.calendar.JDateChooser endDate;
    private javax.swing.JButton exit;
    private javax.swing.JTextField feeName;
    private javax.swing.JTextField feePaid;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton no;
    private javax.swing.JRadioButton notComplete;
    private com.toedter.calendar.JDateChooser startDate;
    private javax.swing.JLabel tName2;
    private javax.swing.JLabel tName3;
    private javax.swing.JLabel tName4;
    private javax.swing.JLabel tName5;
    private javax.swing.JLabel tName6;
    private javax.swing.JLabel tName7;
    private javax.swing.JTextField totalFeeAmount;
    private javax.swing.JRadioButton yes;
    // End of variables declaration                   
}